import React, { useState, useEffect } from "react";
import Calendar from "react-calendar";
import "react-calendar/dist/Calendar.css";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import styles from "../styles/calendar/calendar.module.css";
import {
  FaCalendarDay,
  FaCalendarWeek,
  FaCalendar,
  FaCalendarAlt,
  FaSave,
  FaTimes,
} from "react-icons/fa";
import Header from "../components/Calendar/Header/Header";
import moment from "moment";
import "moment/locale/pt-br";
import DayView from "../components/Calendar/DayView/DayView";
import WeekView from "../components/Calendar/WeekView/WeekView";
import FactoryCalendar from "../components/Calendar/SpecialView/FactoryCalendar";

const CalendarPage: React.FC = () => {
  const [view, setView] = useState<"day" | "week" | "month" | "special">("month");
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);
  const [isEventSetupVisible, setIsEventSetupVisible] = useState<boolean>(false);
  const [eventDetails, setEventDetails] = useState({
    title: "",
    description: "",
    date: new Date(),
    time: "",
    reminderType: "",
    reminderInfo: "",
    invitees: "",
  });
  const [filteredItems, setFilteredItems] = useState<any[]>([]);

  useEffect(() => {
    moment.locale("pt-br");
  }, []);

  const handleDateClick = (date: Date) => {
    setSelectedDate(date);
    setEventDetails({ ...eventDetails, date });
    setIsEventSetupVisible(true);
  };

  const handleEventDetailsChange = (field: string, value: string | Date) => {
    setEventDetails((prev) => ({ ...prev, [field]: value }));
  };

  const handleSaveEvent = () => {
    // Logic to save the event
    setIsEventSetupVisible(false);
  };

  const autoGenerateDescription = () => {
    const { title, invitees, reminderType } = eventDetails;
    setEventDetails({
      ...eventDetails,
      description: `Evento: ${title}\nConvidados: ${invitees}\nLembrete: ${reminderType}`,
    });
  };

  const handleSearch = (query: string) => {
    const data = [eventDetails]; // Assuming you are filtering an array with a single event detail object
    const filtered = data.filter((item) =>
      item.title.toLowerCase().includes(query.toLowerCase())
    );
    setFilteredItems(filtered);
  };

  return (
    <div className={styles.calendarContainer}>
      <div className={styles.sidebar}>
        <ul>
          <li onClick={() => setView("day")}>
            <FaCalendarDay /> Dia
          </li>
          <li onClick={() => setView("week")}>
            <FaCalendarWeek /> Semana
          </li>
          <li onClick={() => setView("month")}>
            <FaCalendar /> Mês
          </li>
          <li onClick={() => setView("special")}>
            <FaCalendarAlt /> Especial
          </li>
        </ul>
      </div>
      <div className={styles.mainContent}>
        <Header onSearch={handleSearch} />
        {view === "day" && (
          <DayView selectedDate={selectedDate || new Date()} />
        )}
        {view === "week" && (
          <WeekView selectedDate={selectedDate || new Date()} />
        )}
        {view === "month" && (
          <Calendar
            locale="pt-BR"
            onClickDay={handleDateClick}
            className={styles.reactCalendar}
          />
        )}
        {view === "special" && <FactoryCalendar />}
      </div>
      {isEventSetupVisible && (
        <div className={styles.eventSetup}>
          <div className={styles.eventSetupHeader}>
            <h2>Configurar Evento</h2>
            <FaTimes
              className={styles.closeIcon}
              onClick={() => setIsEventSetupVisible(false)}
            />
          </div>
          <label>
            Título:
            <input
              type="text"
              value={eventDetails.title}
              onChange={(e) =>
                handleEventDetailsChange("title", e.target.value)
              }
            />
          </label>
          <label>
            Descrição:
            <textarea
              value={eventDetails.description}
              onChange={(e) =>
                handleEventDetailsChange("description", e.target.value)
              }
            />
            <button
              className={styles.autoGenerateBtn}
              onClick={autoGenerateDescription}
            >
              Gerar automaticamente
            </button>
          </label>
          <label>
            Data:
            <DatePicker
              selected={eventDetails.date}
              onChange={(date: Date) => handleEventDetailsChange("date", date)}
              className={styles.datePicker}
            />
          </label>
          <label>
            Hora:
            <input
              type="time"
              value={eventDetails.time}
              onChange={(e) => handleEventDetailsChange("time", e.target.value)}
            />
          </label>
          <label>
            Convidados:
            <input
              type="text"
              value={eventDetails.invitees}
              onChange={(e) =>
                handleEventDetailsChange("invitees", e.target.value)
              }
            />
          </label>
          <label>
            Tipo de Lembrete:
            <select
              value={eventDetails.reminderType}
              onChange={(e) =>
                handleEventDetailsChange("reminderType", e.target.value)
              }
            >
              <option value="">Selecione um lembrete</option>
              <option value="Email">Email</option>
              <option value="SMS">SMS</option>
              <option value="Slack">Slack</option>
              <option value="Google Calendar">Google Calendar</option>
            </select>
          </label>
          {eventDetails.reminderType === "SMS" && (
            <label>
              Número de Telefone:
              <input
                type="text"
                value={eventDetails.reminderInfo}
                onChange={(e) =>
                  handleEventDetailsChange("reminderInfo", e.target.value)
                }
              />
            </label>
          )}
          {eventDetails.reminderType === "Slack" && (
            <label>
              ID do Slack:
              <input
                type="text"
                value={eventDetails.reminderInfo}
                onChange={(e) =>
                  handleEventDetailsChange("reminderInfo", e.target.value)
                }
              />
            </label>
          )}
          {eventDetails.reminderType === "Google Calendar" && (
            <label>
              Email do Google Calendar:
              <input
                type="email"
                value={eventDetails.reminderInfo}
                onChange={(e) =>
                  handleEventDetailsChange("reminderInfo", e.target.value)
                }
              />
            </label>
          )}
          <div className={styles.eventSetupFooter}>
            <button onClick={handleSaveEvent}>
              <FaSave /> Salvar Evento
            </button>
            <button onClick={() => setIsEventSetupVisible(false)}>
              <FaTimes /> Cancelar
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default CalendarPage;
